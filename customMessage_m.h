//
// Generated file, do not edit! Created by opp_msgtool 6.0 from customMessage.msg.
//

#ifndef __CUSTOMMESSAGE_M_H
#define __CUSTOMMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CustomMessage;
/**
 * Class generated from <tt>customMessage.msg:20</tt> by opp_msgtool.
 * <pre>
 * packet CustomMessage
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int seq_num;
 *     string payload;
 *     char parity;
 *     int fType;
 *     int ack_num;
 * }
 * </pre>
 *
 * CustomMessage_Base is only useful if it gets subclassed, and CustomMessage is derived from it.
 * The minimum code to be written for CustomMessage is the following:
 *
 * <pre>
 * class CustomMessage : public CustomMessage_Base
 * {
 *   private:
 *     void copy(const CustomMessage& other) { ... }

 *   public:
 *     CustomMessage(const char *name=nullptr, short kind=0) : CustomMessage_Base(name,kind) {}
 *     CustomMessage(const CustomMessage& other) : CustomMessage_Base(other) {copy(other);}
 *     CustomMessage& operator=(const CustomMessage& other) {if (this==&other) return *this; CustomMessage_Base::operator=(other); copy(other); return *this;}
 *     virtual CustomMessage *dup() const override {return new CustomMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from CustomMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(CustomMessage)
 * </pre>
 */
class CustomMessage_Base : public ::omnetpp::cPacket
{
  protected:
    int seq_num = 0;
    omnetpp::opp_string payload;
    char parity = 0;
    int fType = 0;
    int ack_num = 0;

  private:
    void copy(const CustomMessage_Base& other);

  protected:
    bool operator==(const CustomMessage_Base&) = delete;
    // make constructors protected to avoid instantiation
    // make assignment operator protected to force the user override it
    CustomMessage_Base& operator=(const CustomMessage_Base& other);

  public:
    virtual ~CustomMessage_Base();
    CustomMessage_Base(const char *name=nullptr, short kind=0);
    CustomMessage_Base(const CustomMessage_Base& other);
    virtual CustomMessage_Base *dup() const override {return new CustomMessage_Base (*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSeq_num() const;
    virtual void setSeq_num(int seq_num);

    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);

    virtual char getParity() const;
    virtual void setParity(char parity);

    virtual int getFType() const;
    virtual void setFType(int fType);

    virtual int getAck_num() const;
    virtual void setAck_num(int ack_num);
};


namespace omnetpp {

template<> inline CustomMessage_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<CustomMessage_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CUSTOMMESSAGE_M_H

